.container{
  width: 600px;
  height: 200px;
  border: 1px solid black;
  margin: 30px auto;
  
  
  display: inline-flex;
  /* display: flex; */
  /* 내가 정렬하고 싶은 요소의 부모태그에 속성을 잡는다.
  display:flex; : 전체 컨테이너가 블록으로 잡힘
  *중간으로 온 이유 블록 정렬 요소 margin*
  display: inline-flex;: 전체 컨테이너가 인라인으로 잡힘
  */
 
  /*  */

  flex-direction: row;
  /* 플렉스 컨데이너 안에 아이템의 주축 '방향' 결정 */
  /* row는 디폴트 값 */
  /* 정렬되는 방향을 행으로(디폴트) : row
  열로 : column */

 

  justify-content: space-evenly;
  /* 디폴트 값은 flex-start */
  /* 주축 방향의 '정렬방식' 지정 */


  align-items:flex-start;
  /* stretch 기본값 : 교차축 방향으로 늘려져있음 */
  /* 교축 방향의 '정렬방식' 지정 */
}

.container > div{
  border: 1px solid red;
  
  align-self: flex-start;
  width: 25%px;
  /* align-items와 동일하다. */
  /* flex-basis - width써도 상관없다. */
  /* 물론 차이점은 있다 */
}

/* 아이템 4개를 가로로 배치하고싶다. */
/* 실제로 변경할 내용 아이템4개 : 플렉스 아이템 */
/* 부모태그를 : 플렉스 컨테이너 즉 class="container" */

.d1{
  flex-basis: 200px;
}

.d2{
  flex-basis: 20%;
}


.d3{
  flex-basis: 100px;
}

.d4{
  flex-basis: 15%;
}


.test{
  border: 1px solid black;
  background-color: brown;
  color: white;
  font-size: 1rem;
  width: 100px;
  height: 100px;
  margin-left: 30px;
  
  display: flex;
  flex-direction: row;
  /* 디폴트값이 row니까 굳이 첨가 안해도 됨. */
  justify-content: center;
  align-items: center;
}

